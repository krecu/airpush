// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bid

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFda9a428DecodeAirpushAuctionBid(in *jlexer.Lexer, out *RtbResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dsp":
			out.Dsp = string(in.String())
		case "time_req":
			out.Build = string(in.String())
		case "Bid":
			(out.Bid).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFda9a428EncodeAirpushAuctionBid(out *jwriter.Writer, in RtbResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dsp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Dsp))
	}
	{
		const prefix string = ",\"time_req\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Build))
	}
	{
		const prefix string = ",\"Bid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Bid).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RtbResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFda9a428EncodeAirpushAuctionBid(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RtbResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFda9a428EncodeAirpushAuctionBid(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RtbResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFda9a428DecodeAirpushAuctionBid(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RtbResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFda9a428DecodeAirpushAuctionBid(l, v)
}
func easyjsonFda9a428DecodeAirpushAuctionBid1(in *jlexer.Lexer, out *BidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_wait":
			out.Wait = string(in.String())
		case "cpm":
			out.Cpm = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFda9a428EncodeAirpushAuctionBid1(out *jwriter.Writer, in BidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_wait\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Wait))
	}
	{
		const prefix string = ",\"cpm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Cpm))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFda9a428EncodeAirpushAuctionBid1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFda9a428EncodeAirpushAuctionBid1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFda9a428DecodeAirpushAuctionBid1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFda9a428DecodeAirpushAuctionBid1(l, v)
}
